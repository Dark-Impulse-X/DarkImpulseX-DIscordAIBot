'''                                                        PROJECT DARK IMPULSE X DISCORD BOT

                                                           !!! DISCORD BOT IN YOUR SERVER !!!

                                                    Author and Patent @SadharanLadkaIsBack @the-coder-boy

                                                         Github links of maintainers are below!!

                                                        https://www.github.com/SadharanLadkaIsBack
                                                           https://www.github.com/the-coder-boy

                                                           
                                                               ! Official Discord Server !
                                                              https://discord.gg/78ZUPjYFN4   
'''

import discord  #the main discord python api client 
import os  # for controlling operations and gaining access to keys and other protocols used to gain access and connection to discord and your server 
from openai import OpenAI   #for OpenAI API
import sys      #for just logs     

token = os.getenv("TOKEN")    #just for accessing token
openai_api_key = os.getenv("OPENAI_API_KEY")      #for access to OpenAI API

openClient = OpenAI(api_key = openai_api_key) # gaining access to openai

class MyClient(discord.Client):     #the main function of the bot 
    prompt = [#the default prompts
        "You are a helpful assistant and you are cool and a gigachad guy who knows everything..",
        "\nHuman: What time is it?",
        "\nAI: The time is 12:00. But you should not waste your time just asking these type stupid questions you ass",
    ]

    async def on_ready(self):                 #self login in discord 
        print(f'Logged on as {self.user}!')   #console logging on connection with discord api

    async def getApiResponse(self):   #self api response to be generated by bot
        apiResponse: str| None = None  # api response 

        try:
            response = openClient.completions.create(model='text-davinci-003', #used the text-davinci-003 ai model as it is far best in GPT 3.5 model
            prompt=self.prompt,
            temperature=0.7,
            max_tokens=256,#for small responses and thus faster
            top_p=1,
            frequency_penalty=0,
            presence_penalty=0.6,
            stop=['Human:', 'AI:'])

            # taking the response text from the last
            apiResponse = response.choices[-1].text

        except Exception as e:#exception log
            print(e)

        return apiResponse     #all clear


    async def updateMsg(self, msg):#updating reponse if found
        self.prompt.append(msg)

    async def createPrompt(self, question):
        prompt_msg = f'\nHuman: {question}'  # the prompt message should be according to the prompt list
        await self.updateMsg(prompt_msg)

    async def getBotResponse(self, question):
        await self.createPrompt(question)
        botResponse = await self.getApiResponse()

        if botResponse:
            await self.updateMsg(botResponse)

            # this thing basically cuts off the before: in the response and instead shows you the message
            pos = botResponse.find(':')
            botResponse = botResponse[pos+1:]

        else:# only if token validity expires or something awkward happens
            botResponse = "Something went fu*k"
        return botResponse

    async def chatResponse(self, msg):
        question = msg[5:]
        response = await self.getBotResponse(question)
        return response

    async def on_message(self, message):       
        print(f'Message from {message.author}: {message.content}')

        # the user must mention the bot and continue
        # just you need to mention the bot in the query message and thats it!
        if self.user!= message.author:
          if self.user in message.mentions:
            response = await self.chatResponse(message.content)
            channel = message.channel
            await channel.send(response)

# intents are created 
# this syntax is for the working of the bot in discord            
intents = discord.Intents.default()      
intents.message_content = True

client = MyClient(intents=intents)
client.run(token) #tokens are the OpenAI API keys taken in string format (enclosed in '.')

#adding logs
sys.stdout = open('logs/bot.log', 'w')
sys.stdout.close() #added logging support in folder directory logs/bot.log for tracking